{
"classes":[
    {
        "name": "Combobox",
        "methods": [
            {
                "name":"addItem",
                "paramters": [
                    {"name":"item", "type":"string"}
                ],
                "return": "bool",
                "implements":"ret = (bool)_c(self)->addItem(self, item.c_str(), 0);"
            },
            {
                "name":"removeItem",
                "paramters":[
                    {"name":"index", "type":"int"}
                ],
                "return":"bool",
                "implements":"ret = (bool)_c(self)->removeItem(self, index);"
            },
            {
                "name":"setItem",
                "paramters":[
                    {"name":"index", "type":"int"},
                    {"name":"item", "type":"string"}
                ],
                "return":"bool",
                "implements":"ret = (bool)_c(self)->setItem(self, index, item.c_str());"
            },
            {
                "name":"getItem",
                "paramters":[
                    {"name":"index", "type":"int", "default" : "0"}
                ],
                "return":"string",
                "implements":"ret = string(_c(self)->getItem(self, index));"
            },
            {
                "name":"getCurSel",
                "paramters":[],
                "return":"int",
                "implements":"ret = (int)(_c(self)->getProperty(self, NCSP_COMB_SELECT));"
            }
        ]
    },
    {
        "name":"ProgressBar",
        "methods": [
            {
                "name":"increase",
                "paramters": [
                    {"name":"delta", "type":"int", "default":"1"}
                ],
                "return":"int",
                "implements":"ret = _c(self)->increase(self, delta);"
            },
            {
                "name":"stepIncrease",
                "paramters": [],
                "return":"int",
                "implements":"ret = _c(self)->stepIncrease(self);"
            }
        ]
    },
    {
        "name":"ListView",
        "methods": [
            {
                "name":"addColumn",
                "paramters":[
                    {"name": "index", "type":"int"},
                    {"name": "width", "type":"int"},
                    {"name": "text", "type":"string"}
                 ],
                "return":"bool",
                "implements":"{
        NCS_LISTV_CLMINFO info;
        memset(&info, 0, sizeof(info));
        info.index=index;
        info.width=width;
        info.text=(char*)text.c_str();
        ret = (bool)_c(self)->addColumn(self, &info);
    }"
            },
            {
                "name":"delColumn",
                "paramters":[
                    {"name":"index", "type":"int"}
                ],
                "return":"bool",
                "implements":"ret = (bool)_c(self)->delColumn(self, index);"
            },
            {
                "name":"getColumnCount",
                "paramters":[],
                "return":"int",
                "implements":"ret = _c(self)->getColumnCount(self);"
            },
            {
                "name":"addItem",
                "paramters": [
                    {"name":"index", "type":"int"},
                    {"name":"retPos", "type":"int"},
                    {"name":"parent", "type":"int", "default":"0"},
                    {"name":"height", "type":"int"},
                    {"name":"flags", "type":"int"},
                    {"name":"texts", "type":"object"}
                ],
                "return":"int",
                "implements":"{
        NCS_LISTV_ITEMINFO info;
        NCS_LISTV_ITEMDATA *psubdata = NULL;
        memset(&info, 0, sizeof(info));
        info.index=index;
        info.parent=(HITEM)parent;
        info.retPos = retPos;
        vector<string> subitem_texts = texts.toArray<string>();
        if (subitem_texts.size() > 0) {
            psubdata = new NCS_LISTV_ITEMDATA[subitem_texts.size()];
            memset(psubdata, 0, sizeof(*psubdata)*subitem_texts.size());
            for (int i = 0; i < subitem_texts.size(); i++) {
                psubdata[i].row = index;
                psubdata[i].col = i;
                psubdata[i].text = (char*)subitem_texts[i].c_str();
            }
            info.dataSize = subitem_texts.size();
            info.data = psubdata;
        }
        info.flags=flags;
        ret = _c(self)->addItem(self, &info);
        if (psubdata) {
           delete[] psubdata;
        }
    }"
            },
            {
                "name":"setHeadText",
                "paramters":[
                    {"name":"colindex", "type":"int"},
                    {"name":"text", "type":"string"}
                ],
                "return":"bool",
                "implements":"ret = (bool)(_c(self)->setHeadText(self, colindex, text.c_str()));"
            },
            {
                "name":"getChildItem",
                "paramters": [
                    {"name":"parent", "type":"int"},
                    {"name":"index", "type":"int"}
                ],
                "return":"int",
                "implements":"ret = (int)(_c(self)->getChildItem(self, (HITEM)parent, index));"
            },
            {
                "name":"getChildCount",
                "paramters":[
                    {"name":"item", "type":"int"}
                ],
                "return":"int",
                "implements":"ret = _c(self)->getChildCount(self, (HITEM)item);"
            },
            {
                "name":"getItemText",
                "paramters":[
                    {"name":"row", "type":"int"},
                    {"name":"col", "type":"int"}
                ],
                "return":"string",
                "implements":"{
        NCS_LISTV_ITEMDATA ii;
        memset(&ii, 0, sizeof(ii));
        ii.row=row;
        ii.col=col;
        if(_c(self)->getItemInfo(self,&ii)){
            ret=ii.text;
        } else {
            ret=\"\";
        }
    }"
            }
        ]
    },
    {
        "name":"Edit",
        "methods": [
            {
                "name":"setContent",
                "paramters": [
                    {"name":"text", "type":"string"},
                    {"name":"start", "type":"int", "default":"0"},
                    {"name":"len", "type":"int", "default":"-1"}
                ],
                "return":"int",
                "implements":"ret = _c(self)->setContent(self, text.c_str(), start, len);"
            },
            {
                "name":"replace",
                "paramters":[
                    {"name":"text", "type":"string"},
                    {"name":"start", "type":"int", "default":"0"},
                    {"name":"len", "type":"int", "default":"-1"},
                    {"name":"replaceStart", "type":"int", "default":"0"},
                    {"name":"replaceEnd", "type":"int", "default":"-1"}
                ],
                "return":"void",
                "implements":"_c(self)->replaceText(self, text.c_str(), start, len, replaceStart, replaceEnd);"
            },
            {
                "name":"insert",
                "paramters":[
                    {"name":"text", "type":"string"},
                    {"name":"start", "type":"int", "default":"0"},
                    {"name":"len", "type":"int", "default":"-1"},
                    {"name":"insertStart", "type":"int", "default":"0"}
                ],
                "return":"void",
                "implements":"_c(self)->insert(self, text.c_str(), start, len, insertStart);"
            },
            {
                "name":"append",
                "paramters":[
                    {"name":"text", "type":"string"},
                    {"name":"start", "type":"int", "default":"0"},
                    {"name":"len", "type":"int", "default":"-1"}
                ],
                "return":"void",
                "implements":"_c(self)->append(self, text.c_str(), start, len);"
            },
            {
                "name":"setSel",
                "paramters":[
                    {"name":"start", "type":"int"},
                    {"name":"end", "type":"int"}
                ],
                "return":"int",
                "implements":"ret = _c(self)->setSel(self, start, end);"
            },
            {
                "name":"getSelStart",
                "paramters":[],
                "return":"int",
                "implements":"int end; _c(self)->getSel(self, &ret, &end);"
            },
            {
                "name":"getSelEnd",
                "paramters":[],
                "return":"int",
                "implements":"int start; _c(self)->getSel(self, &start, &ret);"
            },
            {
                "name":"copy",
                "paramters":[],
                "return":"void",
                "implements":"_c(self)->copy(self);"
            },
            {
                "name":"cut",
                "paramters":[],
                "return":"void",
                "implements":"_c(self)->cut(self);"
            },
            {
                "name":"paste",
                "paramters":[],
                "return":"void",
                "implements":"_c(self)->paste(self);"
            },
            {
                "name":"redo",
                "paramters":[],
                "return":"void",
                "implements":"_c(self)->redo(self);"
            },
            {
                "name":"undeo",
                "paramters":[],
                "return":"void",
                "implements":"_c(self)->undo(self);"
            }
        ]
    },
    {
        "name": "ItemView",
        "methods":[
            {
                "name":"getCurSel",
                "paramters":[],
                "return":"int",
                "implements":"ret = _c(self)->getCurSel(self);"
            },
            {
                "name":"setCurSel",
                "paramters":[
                    {"name":"sel", "type":"int"}
                ],
                "return":"void",
                "implements": "_c(self)->setCurSel(self, sel);"
            },
            {
                "name":"removeAll",
                "paramters":[],
                "return":"bool",
                "implements":"_c(self)->removeAll(self);"
            }
        ]
    },
    {
        "name": "ListBox",
        "methods": [
            {
                "name":"setSel",
                "paramters": [
                    {"name": "newSel", "type":"int"},
                    {"name": "flags", "type":"int", "default":"0"}
                ],
                "return":"int",
                "implements":"ret = _c(self)->setSel(self, newSel, flags);"
            },
            {
                "name":"addString",
                "paramters":[
                    {"name": "text", "type":"string"}
                ],
                "return":"int",
                "implements":"ret = _c(self)->addString(self, text.c_str(), 0);"
            },
            {
                "name":"insertString",
                "paramters":[
                    {"name": "text", "type":"string"},
                    {"name": "index", "type":"int"}
                ],
                "return":"int",
                "implements":"ret = _c(self)->insertString(self, text.c_str(), 0, index);"
            },
            {
                "name":"findString",
                "paramters":[
                    {"name":"start", "type":"int"},
                    {"name":"text", "type":"string"},
                    {"name":"bExact", "type":"bool"}
                ],
                "return":"int",
                "implements":"ret = _c(self)->findString(self, start, (char*)text.c_str(), bExact);"
            }
        ]
    }
],

"consts":
[
    "NCSF_ITEM_NORMAL",
    "NCSF_ITEM_SELECTED",
    "NCSF_ITEM_DISABLED",
    "NCSF_LSTITM_FOLD"
]
}
